package com.ktds.hskim.web;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class AddNewMovieActionServlet
 */
public class AddNewMovieActionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public AddNewMovieActionServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.sendError(HttpServletResponse.SC_FORBIDDEN, "잘못된 요청입니다");
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		String movieTitle = request.getParameter("movieTitle");
		String rate = request.getParameter("rate");
		String runningTime = request.getParameter("runningTime");
		String openDate = request.getParameter("openDate");
		String grade = request.getParameter("grade");
		
		List<String> directors = Arrays.asList(request.getParameterValues("directors"));
		List<String> actors = Arrays.asList(request.getParameter("actors"));
		List<String> genres = Arrays.asList(request.getParameter("genres"));
		
		if ( movieTitle == null || movieTitle.length() ==0 ) {
			response.sendRedirect("/Movie/addNewMovie?errorCode=" + MovieValidateConst.MISSING_MOVIE_TITLE);
			return;
		}
		if ( rate == null || rate.length() ==0 ) {
			response.sendRedirect("/Movie/addNewMovie?errorCode=" + MovieValidateConst.MISSING_RATE);
			return;
		}
		if ( runningTime == null || runningTime.length() ==0 ) {
			response.sendRedirect("/Movie/addNewMovie?errorCode=" + MovieValidateConst.MISSING_RUNNING_TIME);
			return;
		}
		if ( openDate == null || openDate.length() ==0 ) {
			response.sendRedirect("/Movie/addNewMovie?errorCode=" + MovieValidateConst.MISSING_OPEN_DATE);
			return;
		}
		if ( grade == null || grade.length() ==0 ) {
			response.sendRedirect("/Movie/addNewMovie?errorCode=" + MovieValidateConst.MISSING_GRADE);
			return;
		}
		if ( directors == null || directors.length() ==0 ) {
			response.sendRedirect("/Movie/addNewMovie?errorCode=" + MovieValidateConst.MISSING_DIRECTORS);
		}
		if ( actors == null || actors.length() ==0 ) {
			response.sendRedirect("/Movie/addNewMovie?errorCode=" + MovieValidateConst.MISSING_ACTORS);
		}
		if ( genres == null || genres.length() ==0 ) {
			response.sendRedirect("/Movie/addNewMovie?errorCode=" + MovieValidateConst.MISSING_GENRES);
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
